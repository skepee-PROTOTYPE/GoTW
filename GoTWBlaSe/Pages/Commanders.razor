@page "/commanders"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Commanders</h1>

@if (AllCommanders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var commtype in AllCommanders.CommanderTypes)
    {
        <CommanderGridFull CommanderType="@commtype" Commanders="@AllCommanders.CommanderSkills.Where(x => x.Type.Equals(commtype.Name))"></CommanderGridFull>
    }

}

@code {

    private GoTWBlaSe.Model.CommandersDTO AllCommanders;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        string address = $"{Helper.apiAddress}api/commanders";

        var request = new HttpRequestMessage(HttpMethod.Get,address);
        //request.Headers.Add("Accept", "application/vnd.github.v3+json");
        //request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            AllCommanders = await JsonSerializer.DeserializeAsync<GoTWBlaSe.Model.CommandersDTO>(responseStream);
            //AllCommanders = await JsonSerializer.DeserializeAsync<GoTWBlaSe.Model.CommandersDTO>(responseStream).ConfigureAwait(false);
        }

        shouldRender = true;
    }
    }
}
